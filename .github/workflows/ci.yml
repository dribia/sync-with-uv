name: CI

on:
  workflow_dispatch:
  push:
    branches:
      - main
      # - '*.x' for latest “.x” branch e.g, (0.1.x)
    paths-ignore:
      - "**.md"
  pull_request:
    branches:
      - main
      # - '*.x' for latest “.x” branch e.g, (0.1.x)
    paths-ignore:
      - "**.md"
  release:
    types: [published]

jobs:
  Testing:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9, "3.10", 3.11]
        os: [ubuntu-latest, macOS-latest, windows-latest]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Set Up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Install and setup Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry

      # See https://docs.github.com/en/actions/advanced-guides/caching-dependencies-to-speed-up-workflows
      # pip and pipenv are supported by setup-python
      # poetry is not (https://github.com/actions/setup-python/issues/298)
      # for poetry you need an ad-hoc solution
      # see https://github.com/python-poetry/poetry/issues/2629 for the problem with win + python3.6
      - name: Set up Poetry cache for Python dependencies
        uses: actions/cache@v2
        if: matrix.os != 'windows-latest'
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-f-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install

      - name: Run tests with coverage
        run: poetry run pytest -svv --cov=./ --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
        with:
          name: sync with poetry # optional
          fail_ci_if_error: true # optional (default = false)
          verbose: true # optional (default = false)
